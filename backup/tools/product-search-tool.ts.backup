// src/tools/product-search-tool.ts
import { DynamicTool } from "@langchain/core/tools";
import { z } from "zod";
import { loadAndParseProducts } from "../utils/product-loader.js";
import { ProductVectorStore, VectorSearchResult } from "../utils/product-vector-store.js";

const ProductSearchInputSchema = z.object({
  kategorie: z.string().describe("Produktkategorie"),
  presupuesto_max: z.number().min(0).describe("Maximales Budget in COP"),
  query: z.string().optional().describe("Spezifische Suchanfrage"),
  usar_vector_search: z.boolean().optional().default(true)
});

type ProductSearchInput = z.infer<typeof ProductSearchInputSchema>;

let vectorStore: ProductVectorStore | null = null;
let isVectorStoreInitialized = false;

async function initializeVectorStore(): Promise<ProductVectorStore> {
  if (!vectorStore) {
    vectorStore = new ProductVectorStore();
  }
  
  if (!isVectorStoreInitialized) {
    console.log("üîÑ Initializing vector store...");
    const products = await loadAndParseProducts();
    await vectorStore.initialize(products);
    isVectorStoreInitialized = true;
    console.log("‚úÖ Vector store initialized");
  }
  
  return vectorStore;
}

async function searchProducts(input: ProductSearchInput) {
  const startTime = Date.now();
  
  try {
    const allProducts = await loadProducts();
    console.log(`üì¶ Loaded ${allProducts.length} products`);

    const useVectorSearch = 
      (process.env.USE_VECTOR_SEARCH === 'true' || input.usar_vector_search) && 
      input.query && input.query.length > 3;

    let searchResults: any[] = [];
    let searchMethod = "keyword";

    if (useVectorSearch) {
      try {
        const vectorStore = await initializeVectorStore();
        const vectorResults = await vectorStore.hybridSearch(
          input.query || input.kategorie, 
          allProducts,
          {
            k: 6,
            maxPrice: input.presupuesto_max
          }
        );
        
        searchResults = vectorResults.map(result => result.product);
        searchMethod = "vector_hybrid";
        
        console.log(`üîç Vector search found ${searchResults.length} results`);
      } catch (vectorError) {
        console.warn("‚ö†Ô∏è Vector search failed, falling back:", vectorError);
        searchResults = fallbackKeywordSearch(allProducts, input);
        searchMethod = "keyword_fallback";
      }
    } else {
      searchResults = fallbackKeywordSearch(allProducts, input);
      searchMethod = "keyword";
    }

    const searchTime = Date.now() - startTime;
    console.log(`‚ö° Search completed in ${searchTime}ms using ${searchMethod}`);

    if (searchResults.length === 0) {
      return `‚ùå No encontr√© productos de "${input.kategorie}" dentro del presupuesto de $${input.presupuesto_max.toLocaleString('es-CO')}.

üîÑ Sugerencias:
- Intenta con categor√≠as como: televisor, refrigerador, lavadora, computador
- Aumenta tu presupuesto
- Busca t√©rminos m√°s generales

‚ö° Tiempo: ${searchTime}ms`;
    }

    // Formatiere Ergebnisse
    let response = `‚úÖ Encontr√© ${searchResults.length} productos`;
    if (input.query) {
      response += ` para "${input.query}"`;
    } else {
      response += ` de "${input.kategorie}"`;
    }
    response += `:\n\n`;

    searchResults.slice(0, 4).forEach((product, index) => {
      response += `${index + 1}. **${product.title}**\n`;
      response += `   üí∞ $${product.price.toLocaleString('es-CO')} COP\n`;
      response += `   üè∑Ô∏è ${product.brand}\n`;
      response += `   üìã ${product.features || 'Caracter√≠sticas no especificadas'}\n\n`;
    });

    if (searchResults.length > 4) {
      response += `üí° Hay ${searchResults.length - 4} productos m√°s disponibles.\n`;
    }

    response += `‚ö° B√∫squeda: ${searchTime}ms | M√©todo: ${searchMethod}`;
    
    return response;

  } catch (error) {
    console.error("‚ùå Error in product search:", error);
    return `‚ùå Error en la b√∫squeda: ${error.message}`;
  }
}

function fallbackKeywordSearch(products: any[], input: ProductSearchInput) {
  const searchTerms = [
    input.kategorie.toLowerCase(),
    ...(input.query ? input.query.toLowerCase().split(/\s+/) : [])
  ].filter(term => term.length > 2);

  return products.filter(product => {
    if (product.price > input.presupuesto_max) return false;

    const searchText = [
      product.title,
      product.brand,
      product.category,
      product._category,
      product.type,
      product.features || ""
    ].join(" ").toLowerCase();

    return searchTerms.some(term => searchText.includes(term));
  }).sort((a, b) => a.price - b.price);
}

export const productSearchTool = new DynamicTool({
  name: "buscar_productos",
  description: `
Busca productos en el cat√°logo de Alkosto.

Input: JSON con:
- kategorie: "televisor", "refrigerador", "lavadora", "computador"
- presupuesto_max: presupuesto m√°ximo en COP
- query: (opcional) descripci√≥n espec√≠fica

Ejemplo: {"kategorie": "televisor", "presupuesto_max": 2000000, "query": "Samsung 55 pulgadas"}
  `.trim(),

  func: async (input: string) => {
    try {
      const parsedInput = JSON.parse(input);
      const validatedInput = ProductSearchInputSchema.parse(parsedInput);
      
      console.log("üîç Product search input:", validatedInput);
      return await searchProducts(validatedInput);
      
    } catch (error) {
      console.error("‚ùå Tool error:", error);
      return `‚ùå Error: Formato inv√°lido. Usa: {"kategorie": "televisor", "presupuesto_max": 2000000}`;
    }
  }
});
