// alkosto-dynamic-criteria-agent.ts
// Enhanced with Dynamic LLM-Powered Category Criteria
import dotenv from "dotenv";
dotenv.config();
import { ChatOpenAI } from "@langchain/openai";
import { enhancedProductSearchTool } from "./tools/product-search-tool-enhanced.js";
// üîí Safe JSON Parsing
function safeJsonParse(input, fallback, context = "") {
    try {
        const parsed = JSON.parse(input);
        return parsed;
    }
    catch (err) {
        console.warn(`‚ùå Error parsing JSON in ${context}:`, err);
        console.warn(`üìù Input was: ${input.slice(0, 200)}...`);
        return fallback;
    }
}
class DynamicCriteriaAlkostoAgent {
    llm;
    context;
    criteriaCache = new Map();
    constructor() {
        this.llm = new ChatOpenAI({
            modelName: "openai/gpt-3.5-turbo",
            openAIApiKey: process.env.OPENAI_API_KEY,
            temperature: 0.3,
            maxTokens: 600,
            streaming: false,
            configuration: {
                baseURL: process.env.OPENAI_BASE_URL || "https://openrouter.ai/api/v1",
                defaultHeaders: {
                    "HTTP-Referer": "http://localhost:3000",
                    "X-Title": "Alkosto Dynamic Criteria Agent"
                }
            }
        });
        this.context = { conversation_history: [] };
    }
    async processMessage(userMessage) {
        const startTime = Date.now();
        try {
            this.context.conversation_history.push(`Cliente: ${userMessage}`);
            // üéØ Dynamic Criteria-Based Analysis
            const processResult = await this.processUserInputWithDynamicCriteria(userMessage);
            const processingTime = Date.now() - startTime;
            if (!processResult.shouldSearch) {
                // üí¨ Dynamic consultation needed
                this.context.conversation_history.push(`Alkosto: ${processResult.response}`);
                return {
                    response: processResult.response || await this.askDynamicQuestion(),
                    context: { ...this.context },
                    processing_time: processingTime,
                    consultation_mode: true,
                    category_analysis: processResult.category_analysis,
                    dynamic_criteria: processResult.dynamic_criteria,
                    criteria_met: false
                };
            }
            else {
                // üîç Ready for sophisticated product search
                const recommendation = await this.searchAndRecommend();
                this.context.conversation_history.push(`Alkosto: ${recommendation}`);
                return {
                    response: recommendation,
                    context: { ...this.context },
                    processing_time: processingTime,
                    consultation_mode: false,
                    category_analysis: processResult.category_analysis,
                    dynamic_criteria: processResult.dynamic_criteria,
                    criteria_met: true
                };
            }
        }
        catch (error) {
            console.error("‚ùå Dynamic Criteria Agent Error:", error.message);
            return {
                response: "üòÖ Disculpa, tuve un peque√±o problema. ¬øPodr√≠as repetir tu pregunta?",
                context: { ...this.context },
                processing_time: Date.now() - startTime,
                consultation_mode: false
            };
        }
    }
    // üß† Dynamic Criteria Determination per Category
    async getDynamicCriteria(categoria) {
        // Check cache first for performance
        if (this.criteriaCache.has(categoria)) {
            return this.criteriaCache.get(categoria);
        }
        const criteriaPrompt = `Analiza la categor√≠a "${categoria}" para ventas en Alkosto Colombia y determina qu√© criterios son esenciales para hacer una recomendaci√≥n de producto √∫til y espec√≠fica.

Considera el contexto de venta al por menor en Colombia y las necesidades t√≠picas de los clientes.

Responde SOLO en formato JSON:
{
  "criterios_esenciales": ["lista", "de", "criterios", "necesarios"],
  "criterios_opcionales": ["lista", "de", "criterios", "√∫tiles", "pero", "no", "cr√≠ticos"],
  "explicacion": "breve explicaci√≥n de por qu√© estos criterios son importantes para ${categoria}"
}

Criterios posibles incluyen: presupuesto_max, uso_principal, espacio_disponible, tamano_hogar, marca, etc.

IMPORTANTE: Solo incluye criterios realmente necesarios para hacer una buena recomendaci√≥n de ${categoria}.`;
        try {
            console.log(`üß† Determinando criterios din√°micos para: ${categoria}`);
            const response = await this.llm.invoke(criteriaPrompt);
            const fallback = {
                criterios_esenciales: ["presupuesto_max"],
                criterios_opcionales: [],
                explicacion: "Criterios b√°sicos para cualquier producto"
            };
            const result = safeJsonParse(response.content, fallback, "dynamic_criteria");
            // Cache the criteria for this category
            this.criteriaCache.set(categoria, result.criterios_esenciales);
            console.log(`üìã Criterios esenciales para ${categoria}:`, result.criterios_esenciales);
            console.log(`üí° Explicaci√≥n:`, result.explicacion);
            return result.criterios_esenciales;
        }
        catch (error) {
            console.log("üö® Error determining dynamic criteria, using fallback");
            const fallbackCriteria = ["presupuesto_max"];
            this.criteriaCache.set(categoria, fallbackCriteria);
            return fallbackCriteria;
        }
    }
    // üéØ Enhanced Processing with Dynamic Criteria Logic
    async processUserInputWithDynamicCriteria(userMessage) {
        const historyString = this.context.conversation_history.slice(-3).join('\n');
        // Step 1: Extract context information
        const contextPrompt = `Analiza la entrada del cliente y extrae informaci√≥n espec√≠fica:

ENTRADA DEL CLIENTE: "${userMessage}"
CONTEXTO ACTUAL: ${JSON.stringify(this.context)}
HISTORIAL RECIENTE: ${historyString}

Responde SOLO en este formato JSON:
{
  "nueva_info": {
    "kategorie": "string o null (televisor, celular, computador, lavadora, nevera, etc)",
    "marca": "string o null (samsung, lg, sony, etc)",
    "presupuesto_max": "number o null (en COP)",
    "uso_principal": "string o null (gaming, trabajo, peliculas, streaming, etc)",
    "user_name": "string o null (si se presenta)",
    "espacio_disponible": "string o null (sala, dormitorio, cocina, etc)",
    "tamano_hogar": "string o null (1-2 personas, familia grande, etc)"
  },
  "categoria_detectada": "string o null - la categor√≠a principal identificada"
}

IMPORTANTE: Solo incluye campos EXPL√çCITAMENTE mencionados por el cliente.`;
        try {
            console.log("üß† Ejecutando extracci√≥n de contexto...");
            const contextResponse = await this.llm.invoke(contextPrompt);
            const contextFallback = {
                nueva_info: {},
                categoria_detectada: null
            };
            const contextResult = safeJsonParse(contextResponse.content, contextFallback, "context_extraction");
            // Merge context updates
            if (contextResult.nueva_info && typeof contextResult.nueva_info === 'object') {
                Object.keys(contextResult.nueva_info).forEach(key => {
                    if (contextResult.nueva_info[key] !== null && contextResult.nueva_info[key] !== undefined) {
                        this.context[key] = contextResult.nueva_info[key];
                    }
                });
            }
            console.log("üìù Context actualizado:", this.context);
            // Step 2: If we have a category, get dynamic criteria
            if (this.context.kategorie) {
                const dynamicCriteria = await this.getDynamicCriteria(this.context.kategorie);
                // Step 3: Check if all essential criteria are met
                const criteriaAnalysis = this.analyzeCriteriaMet(dynamicCriteria);
                console.log("üéØ An√°lisis de criterios din√°micos:");
                console.log(`   Criterios requeridos: ${dynamicCriteria.join(', ')}`);
                console.log(`   Criterios cumplidos: ${criteriaAnalysis.met.join(', ')}`);
                console.log(`   Criterios faltantes: ${criteriaAnalysis.missing.join(', ')}`);
                if (criteriaAnalysis.allMet) {
                    return {
                        shouldSearch: true,
                        category_analysis: `Todos los criterios esenciales est√°n completos para ${this.context.kategorie}`,
                        dynamic_criteria: dynamicCriteria
                    };
                }
                else {
                    // Generate dynamic follow-up questions for missing criteria
                    const dynamicQuestions = await this.generateDynamicFollowUpQuestions(criteriaAnalysis.missing);
                    return {
                        shouldSearch: false,
                        response: dynamicQuestions,
                        category_analysis: `Faltan criterios esenciales para ${this.context.kategorie}: ${criteriaAnalysis.missing.join(', ')}`,
                        dynamic_criteria: dynamicCriteria
                    };
                }
            }
            else {
                // No category detected yet
                return {
                    shouldSearch: false,
                    response: "¬°Hola! ¬øEn qu√© tipo de producto est√°s interesado? Puedo ayudarte con televisores, celulares, computadores, electrodom√©sticos y mucho m√°s.",
                    category_analysis: "Categor√≠a no identificada a√∫n",
                    dynamic_criteria: []
                };
            }
        }
        catch (error) {
            console.log("üö® Error en an√°lisis din√°mico, usando fallback:", error);
            return {
                shouldSearch: false,
                response: "¬øPodr√≠as contarme qu√© tipo de producto buscas y para qu√© lo vas a usar?",
                category_analysis: "Error t√©cnico - modo fallback activado"
            };
        }
    }
    // üìä Analyze which criteria are met vs missing
    analyzeCriteriaMet(requiredCriteria) {
        const met = [];
        const missing = [];
        for (const criterion of requiredCriteria) {
            if (this.context[criterion] !== undefined && this.context[criterion] !== null) {
                met.push(criterion);
            }
            else {
                missing.push(criterion);
            }
        }
        return {
            met,
            missing,
            allMet: missing.length === 0
        };
    }
    // üéØ Generate Dynamic Follow-up Questions based on Missing Criteria
    async generateDynamicFollowUpQuestions(missingCriteria) {
        const questionPrompt = `Eres un vendedor experto de Alkosto. El cliente busca un ${this.context.kategorie} pero falta informaci√≥n importante.

CONTEXTO ACTUAL:
${JSON.stringify(this.context, null, 2)}

CRITERIOS FALTANTES: ${JSON.stringify(missingCriteria)}

HISTORIAL RECIENTE:
${this.context.conversation_history.slice(-3).join('\n')}

Como asesor experto de Alkosto, formula 1-2 preguntas naturales en espa√±ol colombiano que te ayuden a obtener la informaci√≥n faltante m√°s cr√≠tica. 

IMPORTANTE:
- Evita repetir preguntas anteriores del historial
- S√© conversacional y emp√°tico
- Prioriza los criterios m√°s importantes para ${this.context.kategorie}
- Adapta el tono seg√∫n el contexto de la conversaci√≥n

Responde SOLO en JSON:
{
  "preguntas": [
    "Primera pregunta espec√≠fica y natural",
    "Segunda pregunta opcional si es necesaria"
  ],
  "razonamiento": "breve explicaci√≥n de por qu√© estas preguntas son las m√°s importantes ahora"
}

Ejemplo para televisor:
{
  "preguntas": [
    "¬øPara qu√© vas a usar principalmente el televisor? ¬øGaming, pel√≠culas, o TV normal?",
    "¬øCu√°l es tu presupuesto aproximado?"
  ],
  "razonamiento": "Uso principal define caracter√≠sticas t√©cnicas, presupuesto define opciones disponibles"
}`;
        try {
            console.log(`ü§î Generando preguntas din√°micas para criterios faltantes: ${missingCriteria.join(', ')}`);
            const response = await this.llm.invoke(questionPrompt);
            const fallback = {
                preguntas: [`¬øPodr√≠as contarme m√°s detalles sobre el ${this.context.kategorie} que buscas?`],
                razonamiento: "Pregunta gen√©rica de fallback"
            };
            const result = safeJsonParse(response.content, fallback, "dynamic_questions");
            console.log(`üí≠ Razonamiento de preguntas: ${result.razonamiento}`);
            // Return the first 1-2 questions as a natural conversation
            if (result.preguntas.length === 1) {
                return result.preguntas[0];
            }
            else if (result.preguntas.length >= 2) {
                // Combine 2 questions naturally
                return `${result.preguntas[0]} Y tambi√©n, ${result.preguntas[1].toLowerCase()}`;
            }
            return result.preguntas[0] || fallback.preguntas[0];
        }
        catch (error) {
            console.log("üö® Error generating dynamic questions, using fallback");
            return `¬øPodr√≠as contarme m√°s detalles sobre el ${this.context.kategorie} que buscas?`;
        }
    }
    // üéØ Dynamic Question Generation (fallback)
    async askDynamicQuestion() {
        const questionPrompt = `Eres un vendedor experto de Alkosto. 

Contexto actual:
${JSON.stringify(this.context, null, 2)}

Historial reciente:
${this.context.conversation_history.slice(-3).join('\n')}

Haz UNA pregunta espec√≠fica y profesional para obtener informaci√≥n importante que falta.
S√© amigable y natural en espa√±ol colombiano.`;
        const response = await this.llm.invoke(questionPrompt);
        return response.content;
    }
    // üîç Enhanced Product Search and Recommendation
    async searchAndRecommend() {
        try {
            const toolInput = JSON.stringify({
                kategorie: this.context.kategorie,
                presupuesto_max: this.context.presupuesto_max || this.getDefaultBudget(),
                marca: this.context.marca
            });
            console.log("üîç Searching with dynamic criteria validation:", toolInput);
            const toolResult = await enhancedProductSearchTool.func({ input: toolInput });
            const productData = safeJsonParse(toolResult, { success: false, productos: [] }, "product_search");
            if (!productData.success || productData.productos.length === 0) {
                return await this.handleNoResults();
            }
            // üéØ Generate context-aware recommendation
            const recommendationPrompt = `Eres un vendedor experto de Alkosto especializado en ${this.context.kategorie}.

CONTEXTO COMPLETO DEL CLIENTE:
${JSON.stringify(this.context, null, 2)}

PRODUCTOS ENCONTRADOS:
${productData.productos.map((p, i) => `${i + 1}. ${p.title} - ${p.price} - ${p.brand}`).join('\n')}

INSTRUCCIONES:
1. Presenta 2-3 productos destacando caracter√≠sticas espec√≠ficas para ${this.context.uso_principal || 'su uso'}
2. Explica por qu√© son ideales considerando TODOS los criterios conocidos
3. Menciona precios de forma atractiva
4. Incluye consejos espec√≠ficos basados en el contexto completo
5. Termina preguntando si quiere m√°s detalles
6. Usa emojis apropiados
7. M√°ximo 300 palabras
8. S√© personal y espec√≠fico bas√°ndote en la informaci√≥n completa del cliente`;
            const recommendation = await this.llm.invoke(recommendationPrompt);
            return recommendation.content;
        }
        catch (error) {
            console.error("‚ùå Dynamic search error:", error);
            return "üòÖ Tuve un problema buscando productos. ¬øPodr√≠as intentar reformular tu b√∫squeda?";
        }
    }
    async handleNoResults() {
        const noResultsPrompt = `No encontramos productos de ${this.context.kategorie}${this.context.marca ? ` ${this.context.marca}` : ''} 
que cumplan exactamente estos criterios: ${JSON.stringify(this.context)}.

Como experto en ${this.context.kategorie}, sugiere alternativas inteligentes y mant√©n un tono positivo.`;
        const response = await this.llm.invoke(noResultsPrompt);
        return response.content;
    }
    getDefaultBudget() {
        switch (this.context.kategorie) {
            case 'televisor': return 2000000;
            case 'celular': return 1500000;
            case 'computador': return 3000000;
            case 'lavadora': return 2500000;
            case 'nevera': return 3500000;
            default: return 2000000;
        }
    }
    resetContext() {
        this.context = { conversation_history: [] };
    }
    getContext() {
        return { ...this.context };
    }
    getCriteriaCache() {
        return new Map(this.criteriaCache);
    }
}
// üß™ Enhanced Dynamic Criteria Testing with Follow-up Questions
async function testDynamicCriteriaAgent() {
    console.log("üéâ TESTING ENHANCED DYNAMIC CRITERIA AGENT");
    console.log("üß† LLM-Powered Category Logic + Dynamic Follow-up Questions");
    console.log("=".repeat(80));
    const agent = new DynamicCriteriaAlkostoAgent();
    const conversation = [
        "Hola",
        "Busco un televisor",
        "Para gaming y en mi sala, presupuesto de 1.5 millones",
        "Samsung preferiblemente",
        "¬øCu√°l es el mejor para juegos r√°pidos?"
    ];
    let totalProcessingTime = 0;
    let searchCount = 0;
    let consultationCount = 0;
    for (let i = 0; i < conversation.length; i++) {
        const userMessage = conversation[i];
        console.log(`\nüéØ Test ${i + 1}: "${userMessage}"`);
        console.log("-".repeat(60));
        const result = await agent.processMessage(userMessage);
        console.log(`ü§ñ Respuesta: ${result.response}`);
        console.log(`üß† Modo: ${result.consultation_mode ? 'üîç Consulta Din√°mica Adaptiva' : 'üõí B√∫squeda Inteligente'}`);
        console.log(`‚ö° Procesamiento: ${result.processing_time}ms`);
        if (result.category_analysis) {
            console.log(`üéØ An√°lisis: ${result.category_analysis}`);
        }
        if (result.dynamic_criteria && result.dynamic_criteria.length > 0) {
            console.log(`üìã Criterios din√°micos: ${result.dynamic_criteria.join(', ')}`);
            console.log(`‚úÖ Criterios cumplidos: ${result.criteria_met ? 'S√ç - B√∫squeda autorizada' : 'NO - M√°s informaci√≥n necesaria'}`);
        }
        // Show context evolution
        const currentContext = { ...result.context };
        delete currentContext.conversation_history; // Hide for cleaner display
        if (Object.keys(currentContext).length > 0) {
            console.log(`üìù Contexto acumulado: ${JSON.stringify(currentContext, null, 2)}`);
        }
        if (result.consultation_mode) {
            consultationCount++;
        }
        else {
            searchCount++;
        }
        totalProcessingTime += result.processing_time;
        if (i < conversation.length - 1) {
            console.log("\n" + "=".repeat(80));
        }
    }
    console.log("\n" + "=".repeat(80));
    console.log("üìä ESTAD√çSTICAS DE CRITERIOS DIN√ÅMICOS AVANZADOS");
    console.log("=".repeat(80));
    console.log(`‚ö° Tiempo total: ${totalProcessingTime}ms`);
    console.log(`üìà Tiempo promedio: ${Math.round(totalProcessingTime / conversation.length)}ms`);
    console.log(`üîç Consultas adaptivas: ${consultationCount}`);
    console.log(`üõí B√∫squedas autorizadas: ${searchCount}`);
    console.log(`üéØ Eficiencia de criterios: ${searchCount > 0 ? 'Alta - B√∫squeda alcanzada' : 'En progreso'}`);
    console.log("\nüéâ Caracter√≠sticas avanzadas implementadas:");
    console.log("  ‚úÖ Criterios determinados din√°micamente por LLM");
    console.log("  ‚úÖ Preguntas de seguimiento adaptivas e inteligentes");
    console.log("  ‚úÖ Sin reglas hardcodeadas - completamente flexible");
    console.log("  ‚úÖ Extensible a cualquier categor√≠a autom√°ticamente");
    console.log("  ‚úÖ Cache de criterios optimizado para performance");
    console.log("  ‚úÖ An√°lisis contextual completo con validaci√≥n robusta");
    console.log("  ‚úÖ Prevenci√≥n de preguntas repetitivas");
    console.log("  ‚úÖ Combinaci√≥n natural de m√∫ltiples preguntas");
    console.log("\nüìã Cache de criterios din√°micos generado:");
    const criteriaCache = agent.getCriteriaCache();
    if (criteriaCache.size > 0) {
        criteriaCache.forEach((criteria, category) => {
            console.log(`  üì∫ ${category}: ${criteria.join(', ')}`);
        });
    }
    else {
        console.log("  (No se generaron criterios en esta sesi√≥n)");
    }
    console.log("\n‚úÖ ENHANCED DYNAMIC CRITERIA AGENT TEST COMPLETED!");
    console.log("üöÄ Ready for production deployment with state-of-the-art conversation logic!");
}
export { DynamicCriteriaAlkostoAgent };
if (import.meta.url === `file://${process.argv[1]}`) {
    testDynamicCriteriaAgent().catch(console.error);
}
